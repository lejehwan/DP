package proxy_pattern;

public class Example {

    public static void main(String[] args) {
        /**
         * 프록시 패턴(Proxy Pattern)
         * 특정 객체애 대한 접근을 제어하거나 기능을 추가하기 위해 대리인(Proxy)객체를 두는 디자인 패턴
         * 실제 객체 대신 프록시 객체가 클라이언트의 요청을 받아서 처리하는 방식
         *
         * 프록시 패턴의 종류
         * 1. 가상 프록시(Virtual Proxy)
         * 2. 보호 프록시(Protection Proxy)
         * 3. 원격 프록시(Remote Proxy)
         * 4. 로깅 프록시(Logging Proxy)
         * 5. 캐싱 프록시(Caching Proxy)
         *
         * 지연 초기화: 필요한 시점까지 실제 객체의 생성을 미룰 수있어 리소스 절약 및 성능 향상
         * 접근 제어: 실제 객체에 대한 접근을 제한하거나 특정 조건에서만 허용
         * 부가기능 추가: 로깅, 캐싱, 보안, 트랜잭션 처리 등 부가적인 기능을 실제 객체의 코드를 수정하지 않고 프록시에서 처리
         * 유연성: 클라이언트는 실제 객체와 프록시 객체 중 어떤 것을 사용할지 알 필요가 없음
         *
         * 단, 프록시가 추가됨에 따라 시스템의 복잡도가 증가 할 수 있음
         * 그리고 프록시 계층이 추가되어 약간의 응답지연 발생 가능
         */
    }
}
